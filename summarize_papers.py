import json
import glob
from typing import List
from openai import OpenAI

SYSTEM_PROMPT = """You are an expert science writer and analyst, specializing in summarizing and presenting the main themes, innovations, and trends of leading scientific conferences for an informed audience. 

You will receive a set of structured JSON files, each describing a scientific paper presented at the FSE 2025 conference. Your task is to synthesize these descriptions into a single, cohesive, and engaging text for readers interested in the latest research in software engineering.

**Instructions:**
- Write a comprehensive and compelling overview of the main topics, trends, and insights emerging from the FSE 2025 conference, as reflected in the provided papers.
- Do NOT summarize papers one by one. Instead, look for patterns, connections, recurring problems, approaches, tools, and innovative solutions across the papers.
- Highlight emerging research themes, technological innovations, and notable advances that define this yearâ€™s conference.
- Engage the reader with a narrative style, including context on why these research directions are important for software engineering or the wider tech community.
- Use examples and references from the papers (drawn from their titles, abstracts, problems, solutions, results, or conclusions) to illustrate your points, but do not list them exhaustively.
- Comment on the diversity of problems addressed, the methods and tools used, and any notable evaluations or empirical findings, where possible.
- Avoid copying full abstracts or sections verbatim.
- The result should be an article-length, readable, and insightful synthesis, suitable for publication in a newsletter or technology blog.

If a field in the JSON is `null`, simply ignore it.

**Input:** You will receive a list of JSON objects, each containing fields such as: title, url, abstract, session, keywords, domain, problem, solution, results, conclusion, tools, evaluation.
"""


def summarize_papers(papers_dir: str = "papers", output_file: str = "papers_summary.txt") -> str:
    """Generate a conference summary from all JSON descriptions in ``papers_dir``.

    The summary is generated by GPT-4.1 using ``SYSTEM_PROMPT`` and saved to ``output_file``.
    Returns the path to the written file.
    """
    with open("key.txt", "r", encoding="utf-8") as f:
        api_key = f.read().strip()

    paths = sorted(glob.glob(f"{papers_dir}/*.json"))
    papers: List[dict] = []
    for path in paths:
        with open(path, "r", encoding="utf-8") as f:
            try:
                papers.append(json.load(f))
            except json.JSONDecodeError:
                continue

    if not papers:
        raise ValueError("No papers found to summarize")

    client = OpenAI(api_key=api_key)
    user_content = json.dumps(papers, ensure_ascii=False)
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_content},
        ],
        temperature=0.2,
        max_tokens=8192,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0,
    )
    summary = response.choices[0].message.content.strip()

    with open(output_file, "w", encoding="utf-8") as f:
        f.write(summary)

    return output_file


if __name__ == "__main__":
    path = summarize_papers()
    print(f"Summary written to {path}")
